
# You can also access to a certain portion of a tag using the following notations:
# tag_parts[N] refers to the Nth part of the tag.
# tag_prefix[N] refers to the [0..N] part of the tag.
# tag_suffix[N] refers to the [N..] part of the tag.

<filter play.record_transformer>
  # The filter_record_transformer filter plugin mutates/transforms incoming event streams in a versatile manner.
  # If there is a need to add/delete/modify events, this plugin is the first filter to try.
  @type record_transformer
  enable_ruby
  remove_keys key_to_removed
  <record>
    field1 "value1"
    field2 "value2"
    hostname "#{Socket.gethostname}"
    avg ${record["total"] / record["count"]}
    event prefix, ${record["event"]}
  </record>
</filter>

<filter play.grep>
  # The filter_grep filter plugin "greps" events by the values of specified fields.
  @type grep

  <regexp>
    key event
    pattern /included/
  </regexp>

  <exclude>
    key event
    pattern /excluded/
  </exclude>

</filter>

<filter play.parser>
  # The parser filter plugin "parses" string field in event records and mutates its event record with parsed result.
  @type parser
  # Specifies the field name in the record to parse.
  key_name log
  <parse>
    @type regexp
    expression /^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)$/
    time_format %d/%b/%Y:%H:%M:%S %z
  </parse>

  # can have only one parser inside
  #key_name test
  #<parse>
  #  @type regexp
  #  expression /^(?<field1>[^ ]*) (?<field2>[^ ]*) (?<field3>[^ ]*)/
  #</parse>
</filter>